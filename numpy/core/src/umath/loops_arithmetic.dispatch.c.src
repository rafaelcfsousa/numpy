/*@targets
 ** $maxopt baseline
 ** sse2 sse41 avx2 avx512f avx512_skx
 ** vsx2 vsx4
 ** neon
 **/
#define _UMATHMODULE
#define _MULTIARRAYMODULE
#define NPY_NO_DEPRECATED_API NPY_API_VERSION

#include "simd/simd.h"
#include "loops_utils.h"
#include "loops.h"
#include "lowlevel_strided_loops.h"
// Provides the various *_LOOP macros
#include "fast_loop_macros.h"

//###############################################################################
//## Division
//###############################################################################
/********************************************************************************
 ** Defining the SIMD kernels
 *
 * Floor division of signed is based on T. Granlund and P. L. Montgomery
 * "Division by invariant integers using multiplication(see [Figure 6.1]
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.1.2556)"
 * For details on TRUNC division see simd/intdiv.h for more clarification
 ***********************************************************************************
 ** Figure 6.1: Signed division by run-time invariant divisor, rounded towards -INF
 ***********************************************************************************
 * For q = FLOOR(a/d), all sword:
 *     sword -dsign = SRL(d, N - 1);
 *     uword -nsign = (n < -dsign);
 *     uword -qsign = EOR(-nsign, -dsign);
 *     q = TRUNC((n - (-dsign ) + (-nsign))/d) - (-qsign);
 ********************************************************************************/

#if NPY_SIMD
/**begin repeat
 * Signed types
 * #sfx    = s8, s16, s32, s64#
 * #len    = 8,  16,  32,  64#
 */
static NPY_INLINE void
simd_divide_by_scalar_contig_@sfx@(char **args, npy_intp len)
{
    npyv_lanetype_@sfx@ *src   = (npyv_lanetype_@sfx@ *) args[0];
    npyv_lanetype_@sfx@ scalar = *(npyv_lanetype_@sfx@ *) args[1];
    npyv_lanetype_@sfx@ *dst   = (npyv_lanetype_@sfx@ *) args[2];
    const int vstep            = npyv_nlanes_@sfx@;
    const npyv_@sfx@x3 divisor = npyv_divisor_@sfx@(scalar);

    if (scalar == -1) {
        npyv_b@len@ noverflow = npyv_cvt_b@len@_@sfx@(npyv_setall_@sfx@(-1));
        npyv_@sfx@ vzero      = npyv_zero_@sfx@();
        for (; len >= vstep; len -= vstep, src += vstep, dst += vstep) {
            npyv_@sfx@ a       = npyv_load_@sfx@(src);
            npyv_b@len@ gt_min = npyv_cmpgt_@sfx@(a, npyv_setall_@sfx@(NPY_MIN_INT@len@));
            noverflow          = npyv_and_b@len@(noverflow, gt_min);
            npyv_@sfx@ neg     = npyv_ifsub_@sfx@(gt_min, vzero, a, vzero);
            npyv_store_@sfx@(dst, neg);
        }

        int raise_err = npyv_tobits_b@len@(npyv_not_b@len@(noverflow)) != 0;
        for (; len > 0; --len, ++src, ++dst) {
            npyv_lanetype_@sfx@ a = *src;
            if (a == NPY_MIN_INT@len@) {
                raise_err = 1;
                *dst  = 0;
            } else {
                *dst = -a;
            }
        }
        if (raise_err) {

        }
    } else {
        for (; len >= vstep; len -= vstep, src += vstep, dst += vstep) {
            npyv_@sfx@  nsign_d   = npyv_setall_@sfx@(scalar < 0);
            npyv_@sfx@  a         = npyv_load_@sfx@(src);
            npyv_@sfx@  nsign_a   = npyv_cvt_@sfx@_b@len@(npyv_cmplt_@sfx@(a, nsign_d));
            nsign_a               = npyv_and_@sfx@(nsign_a, npyv_setall_@sfx@(1));
            npyv_@sfx@  diff_sign = npyv_sub_@sfx@(nsign_a, nsign_d);
            npyv_@sfx@  to_ninf   = npyv_xor_@sfx@(nsign_a, nsign_d);
            npyv_@sfx@  trunc     = npyv_divc_@sfx@(npyv_add_@sfx@(a, diff_sign), divisor);
            npyv_@sfx@  floor     = npyv_sub_@sfx@(trunc, to_ninf);
            npyv_store_@sfx@(dst, floor);
        }

        for (; len > 0; --len, ++src, ++dst) {
            const npyv_lanetype_@sfx@ a = *src;
            npyv_lanetype_@sfx@ r = a / scalar;
            // Negative quotients needs to be rounded down
            if (((a > 0) != (scalar > 0)) && ((r * scalar) != a)) {
                r--;
            }
            *dst = r;
        }
    }
    npyv_cleanup();
}
/**end repeat**/

/**begin repeat
 * Unsigned types
 * #sfx    = u8, u16, u32, u64#
 * #len    = 8,  16,  32,  64#
 */
static NPY_INLINE void
simd_divide_by_scalar_contig_@sfx@(char **args, npy_intp len)
{
    npyv_lanetype_@sfx@ *src   = (npyv_lanetype_@sfx@ *) args[0];
    npyv_lanetype_@sfx@ scalar = *(npyv_lanetype_@sfx@ *) args[1];
    npyv_lanetype_@sfx@ *dst   = (npyv_lanetype_@sfx@ *) args[2];
    const int vstep            = npyv_nlanes_@sfx@;
    const npyv_@sfx@x3 divisor = npyv_divisor_@sfx@(scalar);

    for (; len >= vstep; len -= vstep, src += vstep, dst += vstep) {
        npyv_@sfx@ a = npyv_load_@sfx@(src);
        npyv_@sfx@ c = npyv_divc_@sfx@(a, divisor);
        npyv_store_@sfx@(dst, c);
    }

    for (; len > 0; --len, ++src, ++dst) {
        const npyv_lanetype_@sfx@ a = *src;
        *dst = a / scalar;
    }
    npyv_cleanup();
}
/**end repeat**/

#if defined(NPY_HAVE_VSX4)

typedef struct {
    npyv_u32x2 hi;
    npyv_u32x2 lo;
} vsx4_u32x4;

typedef struct {
    npyv_s32x2 hi;
    npyv_s32x2 lo;
} vsx4_s32x4;

// Converts 1 8-bit vector into 2 16-bit vectors
NPY_FINLINE npyv_s16x2 vsx4_expand_s16_s8(npyv_s8 data)
{
    npyv_s16x2 r;
    r.val[0] = (npyv_s16)vec_unpackh(data);
    r.val[1] = (npyv_s16)vec_unpackl(data);
    return r;
}

// Converts 1 16-bit vector into 2 32-bit vectors
NPY_FINLINE npyv_s32x2 vsx4_expand_s32_s16(npyv_s16 data)
{
    npyv_s32x2 r;
    r.val[0] = (npyv_s32)vec_unpackh(data);
    r.val[1] = (npyv_s32)vec_unpackl(data);
    return r;
}

/**begin repeat
 * #t      = u, s#
 * #expand = npyv_expand, vsx4_expand#
 */
// Converts 1 8-bit vector into 4 32-bit vectors
NPY_FINLINE vsx4_@t@32x4 vsx4_expand_@t@32_@t@8(npyv_@t@8 data)
{
    vsx4_@t@32x4 r;
    npyv_@t@16x2 expand = @expand@_@t@16_@t@8(data);
    r.hi = @expand@_@t@32_@t@16(expand.val[0]);
    r.lo = @expand@_@t@32_@t@16(expand.val[1]);
    return r;
}

// Converts 4 32-bit vectors into 1 8-bit vector
NPY_FINLINE npyv_@t@8 vsx4_pack_@t@8_@t@32x4(npyv_@t@32 v1,
    npyv_@t@32 v2, npyv_@t@32 v3, npyv_@t@32 v4)
{
    npyv_@t@16 hi = (npyv_@t@16)vec_pack(v1, v2);
    npyv_@t@16 lo = (npyv_@t@16)vec_pack(v3, v4);
    return (npyv_@t@8)vec_pack(hi, lo);
}

// Converts 2 32-bit vectors into 1 16-bit vector
NPY_FINLINE npyv_@t@16
vsx4_pack_@t@16_@t@32x2(npyv_@t@32 v1, npyv_@t@32 v2)
{
    return (npyv_@t@16)vec_pack(v1, v2);
}
/**end repeat**/

/**begin repeat
 * #sfx    = u8,          u16,         s8,          s16#
 * #rsfx   = u32,         u32,         s32,         s32#
 * #rtype  = vsx4_u32x4,  npyv_u32x2,  vsx4_s32x4,  npyv_s32x2#
 * #expand = vsx4_expand, npyv_expand, vsx4_expand, vsx4_expand#
 */
// Generates the divisor for division/modulo operations
NPY_FINLINE @rtype@ vsx4_divisor_@sfx@(npyv_@sfx@ vscalar)
{
    return @expand@_@rsfx@_@sfx@(vscalar);
}
/**end repeat**/

/**begin repeat
 * #sfx = u32, u64, s32, s64#
 */
// Generates the divisor for division/modulo operations
NPY_FINLINE npyv_@sfx@ vsx4_divisor_@sfx@(npyv_@sfx@ vscalar)
{
    return vscalar;
}
/**end repeat**/

/**begin repeat
 * #t      = u, s#
 * #expand = npyv_expand, vsx4_expand#
 */
/**begin repeat1
 * #simd = div, mod##
 */
/**begin repeat2
 * #scalar = 0, 1#
 */
/*
 * Computes division/modulo of 2 8-bit signed/unsigned integer vectors
 *
 * As Power10 only supports integer vector division/modulo for data of 32 bits
 * or greater, we have to convert npyv_u8 into 4x npyv_u32, execute the integer
 * vector division/modulo instruction, and then, convert the result back to
 * npyv_u8.
 */
NPY_FINLINE npyv_@t@8
#if @scalar@
vsx4_@simd@_scalar_@t@8(npyv_@t@8 a, vsx4_@t@32x4 b_expand)
{
#else
vsx4_@simd@_@t@8(npyv_@t@8 a, npyv_@t@8 b)
{
    vsx4_@t@32x4 b_expand = vsx4_expand_@t@32_@t@8(b);
#endif
    vsx4_@t@32x4 a_expand = vsx4_expand_@t@32_@t@8(a);
    npyv_@t@32 v1 = vec_@simd@(a_expand.hi.val[0], b_expand.hi.val[0]);
    npyv_@t@32 v2 = vec_@simd@(a_expand.hi.val[1], b_expand.hi.val[1]);
    npyv_@t@32 v3 = vec_@simd@(a_expand.lo.val[0], b_expand.lo.val[0]);
    npyv_@t@32 v4 = vec_@simd@(a_expand.lo.val[1], b_expand.lo.val[1]);
    return vsx4_pack_@t@8_@t@32x4(v1, v2, v3, v4);
}

// Computes division/modulo of 2 16-bit signed/unsigned integer vectors
NPY_FINLINE npyv_@t@16
#if @scalar@
vsx4_@simd@_scalar_@t@16(npyv_@t@16 a, npyv_@t@32x2 b_expand)
{
#else
vsx4_@simd@_@t@16(npyv_@t@16 a, npyv_@t@16 b)
{
    npyv_@t@32x2 b_expand = @expand@_@t@32_@t@16(b);
#endif
    npyv_@t@32x2 a_expand = @expand@_@t@32_@t@16(a);
    npyv_@t@32 v1 = vec_@simd@(a_expand.val[0], b_expand.val[0]);
    npyv_@t@32 v2 = vec_@simd@(a_expand.val[1], b_expand.val[1]);
    return vsx4_pack_@t@16_@t@32x2(v1, v2);
}

/**begin repeat3
 * #len = 32,  64#
 */
// Computes division/modulo of 2 32/64-bit signed/unsigned integer vectors
NPY_FINLINE npyv_@t@@len@
#if @scalar@
vsx4_@simd@_scalar_@t@@len@(npyv_@t@@len@ a, npyv_@t@@len@ b)
#else
vsx4_@simd@_@t@@len@(npyv_@t@@len@ a, npyv_@t@@len@ b)
#endif
{
    return vec_@simd@(a, b);
}
/**end repeat3**/
/**end repeat2**/
/**end repeat1**/
/**end repeat**/

/**begin repeat
 * Unsigned types
 * #sfx     = u8, u16, u32, u64#
 * #len     = 8,  16,  32,  64#
 * #divtype = vsx4_u32x4, npyv_u32x2,  npyv_u32,  npyv_u64#
 */
/**begin repeat1
 * #func   = fmod, remainder, divide, divmod#
 * #simd   = mod,  mod,       div,    div#
 * #op     = %,    %,         /,#
 * #id     = 0,    1,         2,      3#
 * #scalar = 1,    1,         0,      1#
 */
static NPY_INLINE void
vsx4_simd_@func@_contig_@sfx@(char **args, npy_intp len)
{
    npyv_lanetype_@sfx@ *src1 = (npyv_lanetype_@sfx@ *) args[0];
    npyv_lanetype_@sfx@ *src2 = (npyv_lanetype_@sfx@ *) args[1];
    npyv_lanetype_@sfx@ *dst1 = (npyv_lanetype_@sfx@ *) args[2];
    const npyv_@sfx@ vzero    = npyv_zero_@sfx@();
    const int vstep           = npyv_nlanes_@sfx@;

#if @id@ == 3 /* divmod */
    npyv_lanetype_@sfx@ *dst2 = (npyv_lanetype_@sfx@ *) args[3];
    const npyv_@sfx@ vneg_one = npyv_setall_@sfx@(-1);
    npyv_b@len@ warn          = npyv_cvt_b@len@_@sfx@(npyv_zero_@sfx@());

    for (; len >= vstep; len -= vstep, src1 += vstep, src2 += vstep,
         dst1 += vstep, dst2 += vstep) {
        npyv_@sfx@ a        = npyv_load_@sfx@(src1);
        npyv_@sfx@ b        = npyv_load_@sfx@(src2);
        npyv_@sfx@ quo      = vsx4_div_@sfx@(a, b);
        npyv_@sfx@ rem      = npyv_sub_@sfx@(a, vec_mul(b, quo));
        npyv_b@len@ bzero   = npyv_cmpeq_@sfx@(b, vzero);
        // when b is 0, 'cvtozero' forces the modulo to be 0 too
        npyv_@sfx@ cvtozero = npyv_select_@sfx@(bzero, vzero, vneg_one);
                       warn = npyv_or_@sfx@(bzero, warn);
        npyv_store_@sfx@(dst1, quo);
        npyv_store_@sfx@(dst2, npyv_and_@sfx@(cvtozero, rem));
    }

    if (!vec_all_eq(warn, vzero)) {

    }

    for (; len > 0; --len, ++src1, ++src2, ++dst1, ++dst2) {
        const npyv_lanetype_@sfx@ a = *src1;
        const npyv_lanetype_@sfx@ b = *src2;
        if (NPY_UNLIKELY(b == 0)) {

            *dst1 = 0;
            *dst2 = 0;
        } else{
            *dst1 = a / b;
            *dst2 = a % b;
        }
    }

#else /* fmod, remainder and divide */

    for (; len >= vstep; len -= vstep, src1 += vstep, src2 += vstep,
         dst1 += vstep) {
        npyv_@sfx@ a = npyv_load_@sfx@(src1);
        npyv_@sfx@ b = npyv_load_@sfx@(src2);
        npyv_@sfx@ c = vsx4_@simd@_@sfx@(a, b);
        npyv_store_@sfx@(dst1, c);
        if (NPY_UNLIKELY(vec_any_eq(b, vzero))) {

        }
    }

    for (; len > 0; --len, ++src1, ++src2, ++dst1) {
        const npyv_lanetype_@sfx@ a = *src1;
        const npyv_lanetype_@sfx@ b = *src2;
        if (NPY_UNLIKELY(b == 0)) {

            *dst1 = 0;
        } else{
            *dst1 = a @op@ b;
        }
    }
#endif
    npyv_cleanup();
}

#if @scalar@ /* fmod, remainder and divmod */
static NPY_INLINE void
vsx4_simd_@func@_by_scalar_contig_@sfx@(char **args, npy_intp len)
{
    npyv_lanetype_@sfx@ *src1  = (npyv_lanetype_@sfx@ *) args[0];
    npyv_lanetype_@sfx@ scalar = *(npyv_lanetype_@sfx@ *) args[1];
    npyv_lanetype_@sfx@ *dst1  = (npyv_lanetype_@sfx@ *) args[2];
    const int vstep            = npyv_nlanes_@sfx@;
    const npyv_@sfx@ vscalar   = npyv_setall_@sfx@(scalar);
    const @divtype@ divisor    = vsx4_divisor_@sfx@(vscalar);

#if @id@ == 3 /* divmod */
    npyv_lanetype_@sfx@ *dst2 = (npyv_lanetype_@sfx@ *) args[3];
    for (; len >= vstep; len -= vstep, src1 += vstep, dst1 += vstep,
         dst2 += vstep) {
        npyv_@sfx@ a   = npyv_load_@sfx@(src1);
        npyv_@sfx@ quo = vsx4_div_scalar_@sfx@(a, divisor);
        npyv_@sfx@ rem = npyv_sub_@sfx@(a, vec_mul(vscalar, quo));
        npyv_store_@sfx@(dst1, quo);
        npyv_store_@sfx@(dst2, rem);
    }

    for (; len > 0; --len, ++src1, ++dst1, ++dst2) {
        const npyv_lanetype_@sfx@ a = *src1;
        *dst1 = a / scalar;
        *dst2 = a % scalar;
    }

#else /* fmod and remainder */

    for (; len >= vstep; len -= vstep, src1 += vstep, dst1 += vstep) {
        npyv_@sfx@ a = npyv_load_@sfx@(src1);
        npyv_@sfx@ c = vsx4_mod_scalar_@sfx@(a, divisor);
        npyv_store_@sfx@(dst1, c);
    }

    for (; len > 0; --len, ++src1, ++dst1) {
        const npyv_lanetype_@sfx@ a = *src1;
        *dst1 = a % scalar;
    }
#endif
    npyv_cleanup();
}
#endif
/**end repeat1**/
/**end repeat**/

/**begin repeat
 * Signed types
 * #sfx     = s8, s16, s32, s64#
 * #len     = 8,  16,  32,  64#
 * #divtype = vsx4_s32x4, npyv_s32x2,  npyv_s32,  npyv_s64#
 */
/**begin repeat1
 * #func   = fmod, remainder, divide, divmod#
 * #id     = 0,    1,         2,      3#
 * #scalar = 1,    1,         0,      1#
 */
static NPY_INLINE void
vsx4_simd_@func@_contig_@sfx@(char **args, npy_intp len)
{
    npyv_lanetype_@sfx@ *src1 = (npyv_lanetype_@sfx@ *) args[0];
    npyv_lanetype_@sfx@ *src2 = (npyv_lanetype_@sfx@ *) args[1];
    npyv_lanetype_@sfx@ *dst1 = (npyv_lanetype_@sfx@ *) args[2];
    const npyv_@sfx@ vzero    = npyv_zero_@sfx@();
    const int vstep           = npyv_nlanes_@sfx@;
#if @id@ >= 2 /* divide and divmod */
    const npyv_@sfx@ vneg_one = npyv_setall_@sfx@(-1);
    const npyv_@sfx@ vmin     = npyv_setall_@sfx@(NPY_MIN_INT@len@);
    npyv_b@len@ warn          = npyv_cvt_b@len@_@sfx@(npyv_zero_@sfx@());
#endif

#if @id@ == 3 /* divmod */
    npyv_lanetype_@sfx@ *dst2 = (npyv_lanetype_@sfx@ *) args[3];
    for (; len >= vstep; len -= vstep, src1 += vstep, src2 += vstep,
         dst1 += vstep, dst2 += vstep) {
#else /* fmod, remainder and divide */
    for (; len >= vstep; len -= vstep, src1 += vstep, src2 += vstep,
         dst1 += vstep) {
#endif
        npyv_@sfx@ a = npyv_load_@sfx@(src1);
        npyv_@sfx@ b = npyv_load_@sfx@(src2);
#if @id@ <= 1 /* fmod and remainder */
        npyv_@sfx@ rem       = vsx4_mod_@sfx@(a, b);
#else /* divide and divmod */
        npyv_@sfx@ quo       = vsx4_div_@sfx@(a, b);
        npyv_@sfx@ rem       = npyv_sub_@sfx@(a, vec_mul(b, quo));
        // (b == 0 || (a == NPY_MIN_INT@len@ && b == -1))
        npyv_b@len@ bzero    = npyv_cmpeq_@sfx@(b, vzero);
        npyv_b@len@ amin     = npyv_cmpeq_@sfx@(a, vmin);
        npyv_b@len@ bneg_one = npyv_cmpeq_@sfx@(b, vneg_one);
        npyv_b@len@ overflow = npyv_and_@sfx@(bneg_one, amin);
        npyv_b@len@ error    = npyv_or_@sfx@(bzero, overflow);
        // in case of overflow or b = 0, 'cvtozero' forces quo/rem to be 0
        npyv_@sfx@ cvtozero  = npyv_select_@sfx@(error, vzero, vneg_one);
                        warn = npyv_or_@sfx@(error, warn);
#endif
#if @id@ >= 1 /* remainder, divide and divmod */
        // handle mixed case the way Python does
        // ((a > 0) == (b > 0) || rem == 0)
        npyv_b@len@ a_gt_zero  = npyv_cmpgt_@sfx@(a, vzero);
        npyv_b@len@ b_gt_zero  = npyv_cmpgt_@sfx@(b, vzero);
        npyv_b@len@ ab_eq_cond = npyv_cmpeq_@sfx@(a_gt_zero, b_gt_zero);
        npyv_b@len@ rem_zero   = npyv_cmpeq_@sfx@(rem, vzero);
        npyv_b@len@ or         = npyv_or_@sfx@(ab_eq_cond, rem_zero);
#endif
#if @id@ >= 2 /* divide and divmod */
        npyv_@sfx@ to_sub = npyv_select_@sfx@(or, vzero, vneg_one);
                      quo = npyv_add_@sfx@(quo, to_sub);
        npyv_store_@sfx@(dst1, npyv_and_@sfx@(cvtozero, quo));
#if @id@ == 3 /* divmod */
        npyv_@sfx@ to_add = npyv_select_@sfx@(or, vzero, b);
                      rem = npyv_add_@sfx@(rem, to_add);
        npyv_store_@sfx@(dst2, npyv_and_@sfx@(cvtozero, rem));
#endif
#endif
#if @id@ <= 1 /* fmod and remainder */
#if @id@ == 1 /* remainder */
        npyv_@sfx@ to_add = npyv_select_@sfx@(or, vzero, b);
                      rem = npyv_add_@sfx@(rem, to_add);
#endif
        npyv_store_@sfx@(dst1, rem);
        if (NPY_UNLIKELY(vec_any_eq(b, vzero))) {

        }
#endif
    }

#if @id@ >= 2 /* divide and divmod */
    if (!vec_all_eq(warn, vzero)) {

    }
#endif

#if @id@ == 3 /* divmod */
    for (; len > 0; --len, ++src1, ++src2, ++dst1, ++dst2) {
        const npyv_lanetype_@sfx@ a = *src1;
        const npyv_lanetype_@sfx@ b = *src2;
        if (b == 0 || (a == NPY_MIN_INT@len@ && b == -1)) {

            *dst1 = 0;
            *dst2 = 0;
        }
        else {
            *dst1 = a / b;
            *dst2 = a % b;
            if (!((a > 0) == (b > 0) || *dst2 == 0)) {
                *dst1 -= 1;
                *dst2 += b;
            }
        }
    }

#else /* fmod, remainder and divide */

    for (; len > 0; --len, ++src1, ++src2, ++dst1) {
        const npyv_lanetype_@sfx@ a = *src1;
        const npyv_lanetype_@sfx@ b = *src2;
#if @id@ == 2 /* divide */
        if (b == 0 || (a == NPY_MIN_INT@len@ && b == -1)) {

            *dst1 = 0;
        }
        else {
            *dst1 = a / b;
            if (((a > 0) != (b > 0)) && ((*dst1 * b) != a)) {
                *dst1 -= 1;
            }
        }
#else /* fmod and remainder */
        if (NPY_UNLIKELY(b == 0)) {

            *dst1 = 0;
        } else{
            *dst1 = a % b;
#if @id@ == 1 /* remainder */
            if (!((a > 0) == (b > 0) || *dst1 == 0)) {
                *dst1 += b;
            }
#endif
        }
#endif
    }
#endif
    npyv_cleanup();
}

#if @scalar@ /* fmod, remainder and divmod */
static NPY_INLINE void
vsx4_simd_@func@_by_scalar_contig_@sfx@(char **args, npy_intp len)
{
    npyv_lanetype_@sfx@ *src1  = (npyv_lanetype_@sfx@ *) args[0];
    npyv_lanetype_@sfx@ scalar = *(npyv_lanetype_@sfx@ *) args[1];
    npyv_lanetype_@sfx@ *dst1  = (npyv_lanetype_@sfx@ *) args[2];
    const int vstep            = npyv_nlanes_@sfx@;
    const npyv_@sfx@ vscalar   = npyv_setall_@sfx@(scalar);
    const @divtype@ divisor    = vsx4_divisor_@sfx@(vscalar);
#if @id@ >= 1 /* remainder and divmod */
    const npyv_@sfx@ vzero     = npyv_zero_@sfx@();
    npyv_b@len@ b_gt_zero      = npyv_cmpgt_@sfx@(vscalar, vzero);
#endif
#if @id@ == 3 /* divmod */
    npyv_b@len@ warn          = npyv_cvt_b@len@_@sfx@(npyv_zero_@sfx@());
    const npyv_@sfx@ vmin     = npyv_setall_@sfx@(NPY_MIN_INT@len@);
    const npyv_@sfx@ vneg_one = npyv_setall_@sfx@(-1);
    npyv_b@len@ bneg_one      = npyv_cmpeq_@sfx@(vscalar, vneg_one);
    npyv_lanetype_@sfx@ *dst2 = (npyv_lanetype_@sfx@ *) args[3];

    for (; len >= vstep; len -= vstep, src1 += vstep, dst1 += vstep,
         dst2 += vstep) {
#else /* fmod and remainder */
    for (; len >= vstep; len -= vstep, src1 += vstep, dst1 += vstep) {
#endif
        npyv_@sfx@ a = npyv_load_@sfx@(src1);
#if @id@ <= 1 /* fmod and remainder */
        npyv_@sfx@ rem       = vsx4_mod_scalar_@sfx@(a, divisor);
#else /* divmod */
        npyv_@sfx@ quo       = vsx4_div_scalar_@sfx@(a, divisor);
        npyv_@sfx@ rem       = npyv_sub_@sfx@(a, vec_mul(vscalar, quo));
        // (a == NPY_MIN_INT@len@ && b == -1)
        npyv_b@len@ amin     = npyv_cmpeq_@sfx@(a, vmin);
        npyv_b@len@ overflow = npyv_and_@sfx@(bneg_one, amin);
        // in case of overflow, 'cvtozero' forces quo/rem to be 0
        npyv_@sfx@ cvtozero  = npyv_select_@sfx@(overflow, vzero, vneg_one);
                        warn = npyv_or_@sfx@(overflow, warn);
#endif
#if @id@ >= 1 /* remainder and divmod */
        // handle mixed case the way Python does
        // ((a > 0) == (b > 0) || rem == 0)
        npyv_b@len@ a_gt_zero  = npyv_cmpgt_@sfx@(a, vzero);
        npyv_b@len@ ab_eq_cond = npyv_cmpeq_@sfx@(a_gt_zero, b_gt_zero);
        npyv_b@len@ rem_zero   = npyv_cmpeq_@sfx@(rem, vzero);
        npyv_b@len@ or         = npyv_or_@sfx@(ab_eq_cond, rem_zero);
        npyv_@sfx@ to_add      = npyv_select_@sfx@(or, vzero, vscalar);
                           rem = npyv_add_@sfx@(rem, to_add);
#endif
#if @id@ == 3 /* divmod */
        npyv_@sfx@ to_sub = npyv_select_@sfx@(or, vzero, vneg_one);
        quo               = npyv_add_@sfx@(quo, to_sub);
        npyv_store_@sfx@(dst1, npyv_and_@sfx@(cvtozero, quo));
        npyv_store_@sfx@(dst2, npyv_and_@sfx@(cvtozero, rem));
#else /* fmod and remainder */
        npyv_store_@sfx@(dst1, rem);
#endif
    }

#if @id@ == 3 /* divmod */
    if (!vec_all_eq(warn, vzero)) {

    }

    for (; len > 0; --len, ++src1, ++dst1, ++dst2) {
        const npyv_lanetype_@sfx@ a = *src1;
        if (a == NPY_MIN_INT@len@ && scalar == -1) {

            *dst1 = 0;
            *dst2 = 0;
        }
        else {
            *dst1 = a / scalar;
            *dst2 = a % scalar;
            if (!((a > 0) == (scalar > 0) || *dst2 == 0)) {
                *dst1 -= 1;
                *dst2 += scalar;
            }
        }
    }
#else /* fmod and remainder */
    for (; len > 0; --len, ++src1, ++dst1) {
        const npyv_lanetype_@sfx@ a = *src1;
        *dst1 = a % scalar;
#if @id@ == 1 /* remainder */
        if (!((a > 0) == (scalar > 0) || *dst1 == 0)) {
            *dst1 += scalar;
        }
#endif
    }
#endif
    npyv_cleanup();
}
#endif
/**end repeat1**/
/**end repeat**/
#endif // NPY_HAVE_VSX4
#endif // NPY_SIMD

/********************************************************************************
 ** Defining ufunc inner functions
 ********************************************************************************/

/**begin repeat
 * Signed types
 *  #type  = npy_byte, npy_short, npy_int, npy_long, npy_longlong#
 *  #TYPE  = BYTE,     SHORT,     INT,     LONG,     LONGLONG#
 */
#undef TO_SIMD_SFX
#if 0
/**begin repeat1
 * #len = 8, 16, 32, 64#
 */
#elif NPY_BITSOF_@TYPE@ == @len@
    #define TO_SIMD_SFX(X) X##_s@len@
/**end repeat1**/
#endif

#if NPY_BITSOF_@TYPE@ == 64 && !defined(NPY_HAVE_VSX4) && (defined(NPY_HAVE_VSX) || defined(NPY_HAVE_NEON))
    #undef TO_SIMD_SFX
#endif

NPY_FINLINE @type@ floor_div_@TYPE@(const @type@ n, const @type@ d)
{
    /*
     * FIXME: On x86 at least, dividing the smallest representable integer
     * by -1 causes a SIFGPE (division overflow). We treat this case here
     * (to avoid a SIGFPE crash at python level), but a good solution would
     * be to treat integer division problems separately from FPU exceptions
     * (i.e. a different approach than npy_set_floatstatus_divbyzero()).
     */
    if (NPY_UNLIKELY(d == 0 || (n == NPY_MIN_@TYPE@ && d == -1))) {

        return 0;
    }
    @type@ r = n / d;
    // Negative quotients needs to be rounded down
    if (((n > 0) != (d > 0)) && ((r * d) != n)) {
        r--;
    }
    return r;
}

NPY_NO_EXPORT void NPY_CPU_DISPATCH_CURFX(@TYPE@_divide)
(char **args, npy_intp const *dimensions, npy_intp const *steps, void *NPY_UNUSED(func))
{
    if (IS_BINARY_REDUCE) {
        BINARY_REDUCE_LOOP(@type@) {
            io1 = floor_div_@TYPE@(io1, *(@type@*)ip2);
        }
        *((@type@ *)iop1) = io1;
    }
#if NPY_SIMD && defined(TO_SIMD_SFX)
#if defined(NPY_HAVE_VSX4)
    // both arguments are arrays of the same size
    else if (IS_BLOCKABLE_BINARY(sizeof(@type@), NPY_SIMD_WIDTH)) {
        TO_SIMD_SFX(vsx4_simd_divide_contig)(args, dimensions[0]);
    }
#endif
    // for contiguous block of memory, divisor is a scalar and not 0
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(@type@), NPY_SIMD_WIDTH) &&
             (*(@type@ *)args[1]) != 0) {
        TO_SIMD_SFX(simd_divide_by_scalar_contig)(args, dimensions[0]);
    }
#endif
    else {
        BINARY_LOOP {
            *((@type@ *)op1) = floor_div_@TYPE@(*(@type@*)ip1, *(@type@*)ip2);
        }
    }
}
/**end repeat**/

/**begin repeat
 * Unsigned types
 *  #type  = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong#
 *  #TYPE  = UBYTE,     USHORT,     UINT,     ULONG,     ULONGLONG#
 *  #STYPE = BYTE,      SHORT,      INT,      LONG,      LONGLONG#
 */
#undef TO_SIMD_SFX
#if 0
/**begin repeat1
 * #len = 8, 16, 32, 64#
 */
#elif NPY_BITSOF_@STYPE@ == @len@
    #define TO_SIMD_SFX(X) X##_u@len@
/**end repeat1**/
#endif
/*
 * For 64-bit division on Armv7, Aarch64, and IBM/Power, NPYV fall-backs to the scalar division
 * because emulating multiply-high on these architectures is going to be expensive comparing
 * to the native scalar dividers.
 * Therefore it's better to disable NPYV in this special case to avoid any unnecessary shuffles.
 * Power10(VSX4) is an exception here since it has native support for integer vector division.
 */
#if NPY_BITSOF_@STYPE@ == 64 && !defined(NPY_HAVE_VSX4) && (defined(NPY_HAVE_VSX) || defined(NPY_HAVE_NEON))
    #undef TO_SIMD_SFX
#endif
NPY_NO_EXPORT void NPY_CPU_DISPATCH_CURFX(@TYPE@_divide)
(char **args, npy_intp const *dimensions, npy_intp const *steps, void *NPY_UNUSED(func))
{
    if (IS_BINARY_REDUCE) {
        BINARY_REDUCE_LOOP(@type@) {
            const @type@ d = *(@type@ *)ip2;
            if (NPY_UNLIKELY(d == 0)) {

                io1 = 0;
            } else {
                io1 /= d;
            }
        }
        *((@type@ *)iop1) = io1;
    }
#if NPY_SIMD && defined(TO_SIMD_SFX)
#if defined(NPY_HAVE_VSX4)
    // both arguments are arrays of the same size
    else if (IS_BLOCKABLE_BINARY(sizeof(@type@), NPY_SIMD_WIDTH)) {
        TO_SIMD_SFX(vsx4_simd_divide_contig)(args, dimensions[0]);
    }
#endif
    // for contiguous block of memory, divisor is a scalar and not 0
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(@type@), NPY_SIMD_WIDTH) &&
             (*(@type@ *)args[1]) != 0) {
        TO_SIMD_SFX(simd_divide_by_scalar_contig)(args, dimensions[0]);
    }
#endif
    else {
        BINARY_LOOP {
            const @type@ in1 = *(@type@ *)ip1;
            const @type@ in2 = *(@type@ *)ip2;
            if (NPY_UNLIKELY(in2 == 0)) {

                *((@type@ *)op1) = 0;
            } else{
                *((@type@ *)op1) = in1 / in2;
            }
        }
    }
}
/**end repeat**/

/**begin repeat
 * Signed and Unsigned types
 *  #type      = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *               npy_byte,  npy_short,  npy_int,  npy_long,  npy_longlong#
 *  #TYPE      = UBYTE,     USHORT,     UINT,     ULONG,     ULONGLONG,
 *               BYTE,      SHORT,      INT,      LONG,      LONGLONG#
 *  #STYPE     = BYTE,      SHORT,      INT,      LONG,      LONGLONG,
 *               BYTE,      SHORT,      INT,      LONG,      LONGLONG#
 *  #is_signed = 0, 0, 0, 0, 0, 1, 1, 1, 1, 1#
 */
#undef TO_SIMD_SFX
#if 0
/**begin repeat1
 * #len = 8, 16, 32, 64#
 */
#elif NPY_BITSOF_@STYPE@ == @len@
    #if @is_signed@
        #define TO_SIMD_SFX(X) X##_s@len@
    #else
        #define TO_SIMD_SFX(X) X##_u@len@
    #endif
/**end repeat1**/
#endif

NPY_NO_EXPORT void NPY_CPU_DISPATCH_CURFX(@TYPE@_fmod)
(char **args, npy_intp const *dimensions, npy_intp const *steps, void *NPY_UNUSED(func))
{
#if defined(NPY_HAVE_VSX4) && NPY_SIMD && defined(TO_SIMD_SFX)
    // both arguments are arrays of the same size
    if (IS_BLOCKABLE_BINARY(sizeof(@type@), NPY_SIMD_WIDTH)) {
        TO_SIMD_SFX(vsx4_simd_fmod_contig)(args, dimensions[0]);
        return;
    }
    // for contiguous block of memory, divisor is a scalar and not 0
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(@type@), NPY_SIMD_WIDTH) &&
             (*(@type@ *)args[1]) != 0) {
        TO_SIMD_SFX(vsx4_simd_fmod_by_scalar_contig)(args, dimensions[0]);
        return ;
    }
#endif
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        if (NPY_UNLIKELY(in2 == 0)) {

            *((@type@ *)op1) = 0;
        } else{
            *((@type@ *)op1)= in1 % in2;
        }
    }
}

NPY_NO_EXPORT void NPY_CPU_DISPATCH_CURFX(@TYPE@_remainder)
(char **args, npy_intp const *dimensions, npy_intp const *steps, void *NPY_UNUSED(func))
{
#if defined(NPY_HAVE_VSX4) && NPY_SIMD && defined(TO_SIMD_SFX)
    // both arguments are arrays of the same size
    if (IS_BLOCKABLE_BINARY(sizeof(@type@), NPY_SIMD_WIDTH)) {
        TO_SIMD_SFX(vsx4_simd_remainder_contig)(args, dimensions[0]);
        return;
    }
    // for contiguous block of memory, divisor is a scalar and not 0
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(@type@), NPY_SIMD_WIDTH) &&
             (*(@type@ *)args[1]) != 0) {
        TO_SIMD_SFX(vsx4_simd_remainder_by_scalar_contig)(args, dimensions[0]);
        return ;
    }
#endif
    BINARY_LOOP {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        if (NPY_UNLIKELY(in2 == 0)) {

            *((@type@ *)op1) = 0;
        } else{
#if @is_signed@
            /* handle mixed case the way Python does */
            const @type@ rem = in1 % in2;
            if ((in1 > 0) == (in2 > 0) || rem == 0) {
                *((@type@ *)op1) = rem;
            }
            else {
                *((@type@ *)op1) = rem + in2;
            }
#else
            *((@type@ *)op1)= in1 % in2;
#endif
        }
    }
}

NPY_NO_EXPORT void NPY_CPU_DISPATCH_CURFX(@TYPE@_divmod)
(char **args, npy_intp const *dimensions, npy_intp const *steps, void *NPY_UNUSED(func))
{
#if defined(NPY_HAVE_VSX4) && NPY_SIMD && defined(TO_SIMD_SFX)
    // both arguments are arrays of the same size
    if (IS_BLOCKABLE_BINARY(sizeof(@type@), NPY_SIMD_WIDTH)) {
        TO_SIMD_SFX(vsx4_simd_divmod_contig)(args, dimensions[0]);
        return;
    }
    // for contiguous block of memory, divisor is a scalar and not 0
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(@type@), NPY_SIMD_WIDTH) &&
             (*(@type@ *)args[1]) != 0) {
        TO_SIMD_SFX(vsx4_simd_divmod_by_scalar_contig)(args, dimensions[0]);
        return ;
    }
#endif
#if @is_signed@
    BINARY_LOOP_TWO_OUT {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        /* see FIXME note for divide above */
        if (NPY_UNLIKELY(in2 == 0 || (in1 == NPY_MIN_@TYPE@ && in2 == -1))) {

            *((@type@ *)op1) = 0;
            *((@type@ *)op2) = 0;
        }
        else {
            /* handle mixed case the way Python does */
            const @type@ quo = in1 / in2;
            const @type@ rem = in1 % in2;
            if ((in1 > 0) == (in2 > 0) || rem == 0) {
                *((@type@ *)op1) = quo;
                *((@type@ *)op2) = rem;
            }
            else {
                *((@type@ *)op1) = quo - 1;
                *((@type@ *)op2) = rem + in2;
            }
        }
    }
#else
    BINARY_LOOP_TWO_OUT {
        const @type@ in1 = *(@type@ *)ip1;
        const @type@ in2 = *(@type@ *)ip2;
        if (NPY_UNLIKELY(in2 == 0)) {

            *((@type@ *)op1) = 0;
            *((@type@ *)op2) = 0;
        }
        else {
            *((@type@ *)op1)= in1/in2;
            *((@type@ *)op2) = in1 % in2;
        }
    }
#endif
}
/**end repeat**/
